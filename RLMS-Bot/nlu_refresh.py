import requests
import os

try:
    import extra.config as config
except:
    import config

import vertica_python

def make_db_request(input_string, mode=None):

    conn_info = {
        'host': '18.235.50.52',
        'port': 5433,
        'user': 'dbadmin',
        'password': 'P0tom@c@207',
        'database': 'POTOMACDB',
        # autogenerated session label by default,
        'session_label': 'chatbot',
        # default throw error on invalid UTF-8 results
        'unicode_error': 'strict',
        # SSL is disabled by default
        'ssl': False,
        # using server-side prepared statements is disabled by default
        'use_prepared_statements': False,
        # connection timeout is not enabled by default
        # 5 seconds timeout for a socket operation (Establishing a TCP connection or read/write operation)
        'connection_timeout': 5}
    with vertica_python.connect(**conn_info) as connection:
        cur = None
        if mode == "dict":
            cur = connection.cursor('dict')
        else:
            cur = connection.cursor()
        cur.execute(input_string)
        response = cur.fetchall()
        return response

def build_training_data_file():
    with open('extra/base.md', 'r') as base, open('data/nlu.md', 'w+') as result:
        baselines = base.readlines()
        result.writelines(baselines)

        faq_sections = ["ari", "ccpa", "escrow", "gi", "heloc", "ii", "pdp", "pi", "pt", "rlt", "sm"]
        for section in faq_sections:
            result.write(f"\n\n## intent:faq_{section}")
            response = make_db_request(f"SELECT * FROM Chatbot_POC.static_faq_data WHERE faq_group = '{section}'")
            for row in response:
                result.write(f"\n- {row[1]}")
            result.write(f"\n")

        canned_response_intents = [intent[0] for intent in make_db_request(f"SELECT DISTINCT (canned_group) FROM Chatbot_POC_New.RLMS_CUSTOMER_CANNED_DYNAMIC_RESPONSES_DATA;")]
        for intent in canned_response_intents:
            result.write(f"\n\n## intent:{intent}")

            data = make_db_request(f"SELECT question FROM Chatbot_POC_New.RLMS_CUSTOMER_CANNED_DYNAMIC_RESPONSES_DATA WHERE canned_group = '{intent}';")
            for row in data:
                result.write(f"\n- {row[0]}")
            result.write(f"\n")



try:
    build_training_data_file()
    print("===============================")
    print("Fetched nlu data from database.")
    print("===============================")

except Exception as e:
    print("Refresh failed. Check Utility Server.")
    print(e)
    raise Exception


